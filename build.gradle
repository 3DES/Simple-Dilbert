apply plugin: 'android'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:+'
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url "https://github.com/chrisbanes/PhotoView/raw/maven/"
    }
}

dependencies {
    compile 'com.intellij:annotations:+@jar'
    compile 'com.android.support:support-v4:+@jar'
    compile 'com.android.support:appcompat-v7:+@aar'
    compile 'com.github.chrisbanes.photoview:library:+@jar'
    compile 'joda-time:joda-time:+@jar'
    compile 'org.joda:joda-convert:+@jar'
    compile 'com.nostra13.universalimageloader:universal-image-loader:+@jar'
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.release
        }
    }

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

android.applicationVariants.all { variant ->

    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for {$variant.name}."
        exclude "**/R"
        source = variant.javaCompile.source
        ext.androidJar = "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }

}

if (System.env.TERM == 'dumb') {
    android.buildTypes.release.signingConfig = null
}

task readPasswordFromInput << {
    if (System.env.TERM == 'dumb') {
        return;
    }

    android.signingConfigs.release.keyAlias = 'simple_dilbert'

    if (!project.hasProperty('keyStore') || !project.hasProperty('keyPass') || !project.hasProperty('storePass')) {
        println "\n\$ Enter signing details manually or run with \"-PkeyStore={key.store.name} -PstorePass={StoreSecretPassword} -PkeyPass={KeySecretPassword}\""
    }

    if (!project.hasProperty('keyStore')) {
        def newKeyStore = System.console().readLine("\n\$ Enter keystore location or enter (default: android.keystore): ")
        if (newKeyStore != '') android.signingConfigs.release.storeFile = file('${newKeyStore}')
        else android.signingConfigs.release.storeFile = file('android.keystore')
    } else {
        android.signingConfigs.release.storeFile = file(project.keyStore)
    }

    android.signingConfigs.release.storePassword = project.hasProperty('storePass') ? project.storePass : new String(System.console().readPassword("\$ Store password: "))
    android.signingConfigs.release.keyPassword = project.hasProperty('keyPass') ? project.keyPass : new String(System.console().readPassword("\$ Key password: "))
}

tasks.whenTaskAdded { task ->
    if (task.name == 'validateReleaseSigning') {
        task.dependsOn readPasswordFromInput
    }
}
