buildscript {
    repositories {
	google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0-alpha06'
	classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'

repositories {
    google()
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation 'com.intellij:annotations:12.0'
    implementation 'com.github.chrisbanes:PhotoView:2.1.3'
    implementation 'joda-time:joda-time:2.9.9'
    implementation 'cz.msebera.android:httpclient:4.4.1.2'
    implementation 'com.github.bumptech.glide:glide:4.6.1'
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'org.apache.commons:commons-text:1.2'
    implementation group: 'org.joda', name: 'joda-convert', version: '2.0.1', classifier: 'classic'
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-android.pro'
            minifyEnabled true
            shrinkResources true
        }
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
    }

    lintOptions {
        warningsAsErrors false
        abortOnError false
        ignore 'InvalidPackage', 'RtlHardcoded', 'UnusedAttribute'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    applicationVariants.all { variant ->
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
	    options.tags = [ "attr" ] 
            source = variant.javaCompile.source

            println '=== source ==='
            source.collect { relativePath(it) }.sort().each { println it }

            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
	    classpath += files(variant.javaCompile.classpath.files)

	    println '=== classpath ==='
	    classpath.collect { relativePath(it) }.sort().each { println it }

            destinationDir = file("build/outputs/docs/javadoc/")
            title = rootProject.name
            failOnError false
        }
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}
